{"pageProps":{"library":{"name":"RxJS","version":"6.6.7","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","single","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","defaultIfEmpty","delay","delayWhen","dematerialize","repeat","timeout"]}]},"example":{"name":"constructor","title":"Observable constructor","pageTitle":"Observable â€” RxJS constructor usage example + marble diagram","desc":"See how to create your own observable using Observable constructor","docsUrl":"https://rxjs.dev/api/index/class/Observable","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/constructor.md","content":"\n\nLets you create your own **Observable**. How cool is that? ðŸ˜Ž  \n`Observable` constructor takes in a function that will be called upon subscription. This function will decide how and when to notify the observer. It should return a [teardown](https://rxjs.dev/api/index/type-alias/TeardownLogic) mechanism that will be activated when unsubscribed (for cleanup).\n\n> **NOTE:** While enjoying this might, don't forget that now you have greater responsibility. Take a better look at `Creation` section in the menu for ready-to-use factories.\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { Observable } = require('rxjs');\n\n\nconst source$ = new Observable(observer => {\n  let index = 0;\n\n  // start pushing values to observer\n  // once every 100ms\n  const id = setInterval(()=>{\n    observer.next(index++);\n  }, 100);\n\n  // return a teardown function\n  return ()=>{\n    clearInterval(id);\n  };\n});\n\nsource$\n  .subscribe(rxObserver());\n```"}},"__N_SSG":true}