{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Observable","items":["pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"retry","title":"retry","pageTitle":"retry — RxJS operator example + marble diagram","desc":"retry will attempt to resubscribe to source Observable if source has failed","docsUrl":"https://rxjs.dev/api/operators/retry","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/retry.md","content":"\n\nretry will attempt to resubscribe to source Observable if source has failed. It's useful, for example, when retrying failed network requests.\n\n> See [retryWhen](/rxjs/retryWhen/) operator for a more strategic approach\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { timer, from } = require('rxjs');\nconst { zip, map, retry } = require('rxjs/operators');\n\nconst error$ = timer(0, 5).pipe(\n    map(x=>{\n      if (x>2) { throw 'Bam!' }\n      return x;\n    }),\n    zip(from(palette), Marble) // colorize the stream\n  );\n\n// retry 2 times\nconst retry$ = error$.pipe(\n    retry(2)\n  );\n\n\nerror$.subscribe(rxObserver());\nretry$.subscribe(rxObserver());\n\n\n// helpers\n// creates a colored Marble\nfunction Marble(value,color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n```\n\nCheck out [\"Error handling in RxJS\"](https://medium.com/@kddsky/error-handling-in-rxjs-bac0f96a7def) article to get better understanding how not to fail with Observables."}},"__N_SSG":true}