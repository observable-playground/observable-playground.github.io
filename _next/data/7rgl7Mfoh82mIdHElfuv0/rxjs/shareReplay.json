{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Observable","items":["pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"shareReplay","title":"shareReplay","pageTitle":"shareReplay — RxJS operator example + marble diagram","desc":"","docsUrl":"https://rxjs.dev/api/operators/shareReplay","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/shareReplay.md","content":"\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { timer, from } = require('rxjs');\nconst { zip, shareReplay, take } = require('rxjs/operators');\n\n\n// our source will be a basic timer\n// making 5 ticks, every 5ms\nconst source$ = timer(0, 5).pipe(\n  take(5),\n  zip(from(palette), Marble) // add color to items\n);\n\nconst shared$ = source$.pipe(\n  shareReplay()\n);\n\n\n// subscriptions and visualisations:\n// creating observers for source$\nconst a = rxObserver('source$');\nconst b = rxObserver('source$ — delayed subscription');\nsource$.subscribe(a);\n\n// creating observers for shared$\nconst c = rxObserver('shared$');\nconst d = rxObserver('shared$ — delayed subscription');\nshared$.subscribe(c);\n\n// delayed subscriptions\nsetTimeout(()=>{\n  source$.subscribe(b);\n  shared$.subscribe(d);\n}, 10);\n\n\n\n// helpers\nfunction Marble(value,color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n```\n"}},"__N_SSG":true}