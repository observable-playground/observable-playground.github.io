{"pageProps":{"library":{"name":"RxJS","version":"6.6.7","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","single","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","defaultIfEmpty","delay","delayWhen","dematerialize","repeat","timeout"]}]},"example":{"name":"pluck","title":"pluck","pageTitle":"pluck â€” RxJS operator example + marble diagram","desc":"Map each emitted value to it's property, defined by path","docsUrl":"https://rxjs.dev/api/operators/pluck","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/pluck.md","content":"\n\nMap each emitted value to it's property, defined by path:  \n\n_**NOTE:** I've created a package to simplify subproperty access_    \n_It turns Observables of Objects into Objects of Observables_    \n_Check it out: [rxjs/proxy](/rxjs/proxy/) {ðŸ‘“}_    \n\n_Also see the [`map`](/rxjs/map/) operator and try comparing [**pluck** to **map**](/rxjs/map-vs-pluck/)_\n\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { of } = require('rxjs');\nconst { pluck, map } = require('rxjs/operators');\n\nconst source$ = of({ a: 1 }, { a: 2 }, { a: 3 });\n\nsource$\n  .pipe(\n    map(x => JSON.stringify(x))\n  )\n  .subscribe(rxObserver('of( { a: 1 } , ... )'));\n\nsource$\n  .pipe(\n    pluck('a')\n  )\n  .subscribe(rxObserver(`pluck('a')`));\n\n```\n"}},"__N_SSG":true}