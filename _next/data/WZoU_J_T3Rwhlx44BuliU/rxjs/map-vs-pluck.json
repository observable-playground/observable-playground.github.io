{"pageProps":{"library":{"name":"RxJS","version":"6.6.3","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"map-vs-pluck","title":"map vs pluck","pageTitle":"map vs pluck — RxJS operators comparison + marble diagram","desc":"Compare map operator to pluck in this interactive playground:","docsUrl":"","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/map-vs-pluck.md","content":"\n\n[map](/rxjs/map/) operator can be easily substituted with a simple [pluck](/rxjs/pluck/), if all we need is to read a property of a value:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { of } = require('rxjs');\nconst { pluck, map } = require('rxjs/operators');\n\nconst source$ = of(\n  { a: 1 },\n  { a: 2 },\n  { },\n  { a: 3 }\n);\n\nsource$\n  .pipe(\n    map(x => x.a)\n  )\n  .subscribe(rxObserver('map(x => x.a)'));\n\nsource$\n  .pipe(\n    pluck('a')\n  )\n  .subscribe(rxObserver(`pluck('a')`));\n\n```\n\n\nEven better when we have nested properties!\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { of } = require('rxjs');\nconst { pluck, map } = require('rxjs/operators');\n\nconst source$ = of(\n  { a: { b: 1 } },\n  { a: { b: 2 } },\n  { },\n  { a: { b: 3 } },\n);\n\nsource$\n  .pipe(\n    map(x => x.a && x.a.b)\n  )\n  .subscribe(rxObserver('map(x => x.a && x.a.b)'));\n\nsource$\n  .pipe(\n    pluck('a', 'b')\n  )\n  .subscribe(rxObserver(`pluck('a', 'b')`));\n\n```\n\n> Read more about pluck vs map comparison in this article: [\"RxJs|Pluck: A pound of pluck is worth a ton of map !\"](https://medium.com/@chebbi.lamis/rxjs-pluck-a-pound-of-pluck-is-worth-a-ton-of-map-f7cc600db371) by [chebbi lamis](https://medium.com/@chebbi.lamis)"}},"__N_SSG":true}