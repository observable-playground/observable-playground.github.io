{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Observable","items":["pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"map","title":"map","pageTitle":"map — RxJS operator example + marble diagram","desc":"Map each emitted value to another value","docsUrl":"https://rxjs.dev/api/operators/map","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/map.md","content":"\n\n`map` turns each emitted value into another value, using mapping function\n\n**NOTE**: if your mapping function returns an Observable or a Promise — you'll need one of `*Map` operators:    \n[mergeMap, exhaustMap, switchMap, concatMap](/rxjs/mergeMap-vs-exhaustMap-vs-switchMap-vs-concatMap/)\n\n> Also check out [`pluck`](/rxjs/pluck/) operator and try comparing [**map** to **pluck**](/rxjs/map-vs-pluck/)\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { map, take } = require('rxjs/operators');\n\n// 5 values from a timer\ntimer(0, 10)\n  .pipe(\n    take(5)\n  )\n  .subscribe(rxObserver('timer(0, 5)'));\n\n// 5 mapped values from a timer\ntimer(0, 10)\n  .pipe(\n    map(i => i + ' 🦆'),\n    take(5)\n  )\n  .subscribe(rxObserver('map(i => i + 🦆)'));\n\n```"}},"__N_SSG":true}