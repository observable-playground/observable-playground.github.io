{"pageProps":{"library":{"name":"RxJS","version":"6.6.3","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","defaultIfEmpty","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"js-pipeline","title":"RxJS with pipeline |> operator proposal","pageTitle":"RxJS with pipeline |> operator proposal","desc":"This example shows how to use ECMAScript pipeline operator proposal with RxJS pipe operators","docsUrl":"","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/js-pipeline.md","content":"\n\n> **EXPERIMENTAL**\n\nPipeline operator `|>` is a new proposal to ECMAScript that simplifies \"piping\" a value through several functions.    \nAnd it nicely fits into RxJS' [`pipe`](/rxjs/pipe/) flow:\n\n```js\n// proposal-pipeline-operator\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { take, map } = require('rxjs/operators');\n\nconst msg = 'awesome';\n\ntimer(0, 5)\n  |> take(msg.length)\n  |> map(index=>msg[index])\n  |> subscribe(rxObserver())\n  ;\n\nfunction subscribe(observer){\n  return stream$ => stream$.subscribe(observer);\n}\n\n```\n\n> **NOTE**: the code should start with `// proposal-pipeline-operator` comment to properly parse the pipeline operator in this playground\n\nSee TC-39 [pipeline operator proposal](https://github.com/tc39/proposal-pipeline-operator/) for more details"}},"__N_SSG":true}