{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Observable","items":["pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"first","title":"first","pageTitle":"first — RxJS operator example + marble diagram","desc":"first operator takes the first emission from the source and then completes","docsUrl":"https://rxjs.dev/api/operators/first","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/first.md","content":"\n\n`first` operator re-emits the first emission from the source and then completes\n\n> Also check out this [`first` vs `take` vs `single`](/rxjs/first-vs-take-vs-single/) head-to-head comparison\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { take, first } = require('rxjs/operators');\n\nconst source$ = timer(10, 10).pipe(\n    take(10)\n  );\n\nconst result$ = source$.pipe(\n    first()\n  );\n\n\nsource$.subscribe(rxObserver('source'));\nresult$.subscribe(rxObserver('first()'));\n\n```"}},"__N_SSG":true}