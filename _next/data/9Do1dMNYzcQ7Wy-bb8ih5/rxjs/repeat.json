{"pageProps":{"library":{"name":"RxJS","version":"6.6.3","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","defaultIfEmpty","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"repeat","title":"repeat","pageTitle":"repeat — RxJS operator example + marble diagram","desc":"Repeat operator will resubscribe to source once it completes","docsUrl":"https://rxjs.dev/api/operators/repeat","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/repeat.md","content":"\n\nRepeat operator will resubscribe to source once it completes. `repeat` takes optional number of repeats, if omitted — will resubscribe indefinitely, if set to 0 — will return an empty observable.\n\n## Basic example\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { repeat } = require('rxjs/operators');\n\ntimer(5)\n  .pipe(\n    repeat(5)\n  )\n  .subscribe(rxObserver());\n\n```\n\n## Smarter source\n\nWhen source stream completes, repeat will re-subscribe again and will get a new source stream:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer, iif, of } = require('rxjs');\nconst { repeat, delay } = require('rxjs/operators');\n\niif(\n  () => Date.now() < 10\n  , of('0..10')\n  , of('10+')\n)\n  .pipe(\n    delay(5),\n    repeat(5)\n  )\n  .subscribe(rxObserver());\n\n```\n"}},"__N_SSG":true}