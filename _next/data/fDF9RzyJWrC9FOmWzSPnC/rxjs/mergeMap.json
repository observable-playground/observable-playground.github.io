{"pageProps":{"library":{"name":"RxJS","version":"6.6.7","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","defaultIfEmpty","delay","delayWhen","dematerialize","repeat","timeout"]}]},"example":{"name":"mergeMap","title":"mergeMap (aka flatMap)","pageTitle":"mergeMap â€” RxJS (flatMap) operator example + marble diagram","desc":"mergeMap will substitute value on the source Observable with an Observable, returned by inner function. See this example of RxJS mergeMap with a timer","docsUrl":"https://rxjs.dev/api/operators/mergeMap","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/mergeMap.md","content":"\n\n`mergeMap`, as well as other `**Map` operators, will substitute value on the source stream with a stream of values, returned by inner function. When source stream emits, `mergeMap` will call inner function to merge yet another inner stream to the resulting stream.  \n> Also try this [mergeMap vs exhaustMap vs switchMap vs concatMap](/rxjs/mergeMap-vs-exhaustMap-vs-switchMap-vs-concatMap/) head-to-head comparison\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { from, timer, pipe } = require('rxjs');\nconst { zip, take, map, mergeMap, delayWhen } = require('rxjs/operators');\n\n\n// our source$ will emit values at 5ms, 10ms, 20ms\nconst source$ = fromDelayed([ 5, 10, 20 ]).pipe(\n    zip(from(palette), Marble) // colorize each item\n  );\n\nconst mergeMap$ = source$.pipe(\n    mergeMap(x => timer(0, 3).pipe(\n        take(3),\n        colorize(x.color))  // colorize as source$ value\n      )\n  );\n\n// visualization\nsource$.subscribe(rxObserver('source$'));\nmergeMap$.subscribe(rxObserver('mergeMap( timer(0, 3).take(3) )'));\n\n\n// helpers\nfunction colorize(color) {\n  return pipe(\n    map(y => Marble(y, color))\n  );\n}\n\n// creates a colored Marble\nfunction Marble(value,color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n// like .from, but items are delayed by their value\nfunction fromDelayed (arr) {\n  return from(arr).pipe(\n      delayWhen(x=>timer(x))\n    );\n}\n\n```\n\nNOTE: `mergeMap` is also available via `flatMap` alias"}},"__N_SSG":true}