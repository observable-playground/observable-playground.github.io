{"pageProps":{"library":{"name":"RxJS","version":"6.6.7","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","single","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","defaultIfEmpty","delay","delayWhen","dematerialize","repeat","timeout"]}]},"example":{"name":"single","title":"single","pageTitle":"single — RxJS operator example + marble diagram","desc":"Returns an Observable that emits a value if and only if the source observable emits a single value:","docsUrl":"","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/single.md","content":"\n\nReturns an Observable that emits a value if and only if the source observable emits a **single** value. No more, no less. Otherwise throws an error. Also takes an optional predicate to pre-filter values:\n\n> Also check out this [`first` vs `take` vs `single`](/rxjs/first-vs-take-vs-single/) head-to-head comparison\n\n---\n\n**No predicate** — multiple values from the source will result in an error:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { single, take } = require('rxjs/operators');\n\nconst source$ = timer(0, 5).pipe(take(5));\nconst result$ = source$.pipe(single());\n\nsource$.subscribe(rxObserver('source'));\nresult$.subscribe(rxObserver('single()'));\n```\n\n---\n\n**Predicate** — predicate will narrow source values to just one:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { single, take } = require('rxjs/operators');\n\nconst source$ = timer(0, 5).pipe(take(5));\nconst result$ = source$.pipe(single(n => n === 3));\n\nsource$.subscribe(rxObserver('source'));\nresult$.subscribe(rxObserver('single(n => n === 3)'));\n```\n\n---\n\n**An [empty](/rxjs/empty) source** — will result in an error, as no values are emitted at all:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { EMPTY } = require('rxjs');\nconst { single } = require('rxjs/operators');\n\nconst source$ = EMPTY;\nconst result$ = source$.pipe(single());\n\nsource$.subscribe(rxObserver('EMPTY'));\nresult$.subscribe(rxObserver('single()'));\n```\n"}},"__N_SSG":true}