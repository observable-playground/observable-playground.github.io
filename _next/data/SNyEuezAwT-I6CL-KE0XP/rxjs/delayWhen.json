{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout","pipe"]}]},"example":{"name":"delayWhen","title":"delayWhen","pageTitle":"RxJS delayWhen operator example + marble diagram","desc":"","docsUrl":"https://rxjs.dev/api/operators/delayWhen","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/delayWhen.md","content":"\n\nDelay value emission by a another stream. In this example we'll delay source stream emissions by their numeric values:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { from, timer } = require('rxjs');\nconst { delayWhen } = require('rxjs/operators');\n\nconst source$ =  from([ 0, 15, 20, 25, 5, 10 ]);\n\nconst delayed$ = source$.pipe(\n    delayWhen(x => timer(x))\n  );\n  \nsource$.subscribe(rxObserver('source$'));\ndelayed$.subscribe(rxObserver('delayed$'));\n\n```\n\nTo delay values emission by constant time â€” see [`delay` operator example](/rxjs/delay/)"}},"__N_SSG":true}