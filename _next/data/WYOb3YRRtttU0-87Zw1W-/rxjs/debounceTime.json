{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["forEach","tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout","pipe"]}]},"example":{"name":"debounceTime","title":"debounceTime","pageTitle":"RxJS debounceTime operator example","desc":"debounceTime will emit a value from the source stream only if a given time has passed without source producing more values. See this marble diagram:","docsUrl":"https://rxjs.dev/api/operators/debounceTime","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/debounceTime.md","content":"\n\ndebounceTime operator will emit a value from the source stream only if a given time has passed without source producing more values.  \n> Also try this [debounceTime vs throttleTime vs auditTime vs sampleTime](/rxjs/debounceTime-vs-throttleTime-vs-auditTime-vs-sampleTime/) head-to-head comparison\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { merge, timer, from } = require('rxjs');\nconst { map, zip, debounceTime, takeUntil } = require('rxjs/operators');\n\n// stream for coloring\nconst palette$ = from(palette);\n\nconst source$ = merge(\n    timer(0, 330),\n    timer(50, 180)\n  ).pipe(\n    // colorize each item\n    zip(palette$, Marble),\n    map(setCurrentTime),\n    takeUntil(timer(1000))\n  );\n\nsource$\n  .subscribe(rxObserver());\n\nsource$.pipe(\n    debounceTime(100),\n    map(setCurrentTime)\n  )\n  .subscribe(rxObserver('debounceTime(100)'));\n\n\n// helpers\n// keeps colors, updated value to Date.now\nfunction setCurrentTime({ color }){\n  return Marble(Date.now(), color);\n}\n\n// creates a colored Marble\nfunction Marble(value, color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n```"}},"__N_SSG":true}