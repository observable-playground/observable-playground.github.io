{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["forEach","tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout","pipe"]}]},"example":{"name":"timer","title":"timer","pageTitle":"RxJS timer function example","desc":"timer will emit values with a given pace after a delay. Examples with a marble diagrams","docsUrl":"https://rxjs.dev/api/index/function/timer","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/timer.md","content":"\n## emit once\n\n`timer(msDelay)` will emit once after a given delay\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { take } = require('rxjs/operators');\n\n// will emit once in 10ms\ntimer(10)\n  .subscribe(rxObserver('timer(10)'));\n\n```\n\n## emit with interval\n\n`timer(msDelay, msInterval)` after a given delay will start emitting sequential number values with a given interval\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { take } = require('rxjs/operators');\n\n// will start emiting in 10ms\n// with 5ms interval\ntimer(10, 5).pipe(\n    take(4)\n  )\n  .subscribe(rxObserver('timer(10, 5)'));\n\n```\n"}},"__N_SSG":true}