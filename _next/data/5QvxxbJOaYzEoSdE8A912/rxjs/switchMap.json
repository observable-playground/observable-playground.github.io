{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["forEach","tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout","pipe"]}]},"example":{"name":"switchMap","title":"switchMap","pageTitle":"switchMap â€” RxJS operator example + marble diagram","desc":"switchMap will substitute value on the source Observable with an Observable, returned by inner function. See this example of RxJS switchMap with a timer","docsUrl":"https://rxjs.dev/api/operators/switchMap","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/switchMap.md","content":"\n\n`switchMap`, as well as other `**Map` operators, will substitute value on the source stream with a stream of values, returned by inner function. When source stream emits, `switchMap` will unsubscribe from previous inner stream and will call inner function to **switch** to the new inner observable.  \n> Also try this [mergeMap vs exhaustMap vs switchMap vs concatMap](/rxjs/mergeMap-vs-exhaustMap-vs-switchMap-vs-concatMap/) head-to-head comparison\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { from, timer, pipe } = require('rxjs');\nconst { zip, take, map, switchMap, delayWhen } = require('rxjs/operators');\n\n\n// our source$ will emit values at 5ms, 10ms, 20ms\nconst source$ = fromDelayed([ 5, 10, 20 ]).pipe(\n    zip(from(palette), Marble) // colorize each item\n  );\n\nconst switchMap$ = source$.pipe(\n    switchMap(x => timer(0, 3).pipe(\n        take(3),\n        colorize(x.color))  // colorize as source$ value\n      )\n  );\n\n// visualization\nsource$.subscribe(rxObserver('source$'));\nswitchMap$.subscribe(rxObserver('switchMap( timer(0, 3).take(3) )'));\n\n\n// helpers\nfunction colorize(color) {\n  return pipe(\n    map(y => Marble(y, color))\n  );\n}\n\n// creates a colored Marble\nfunction Marble(value,color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n// like .from, but items are delayed by their value\nfunction fromDelayed (arr) {\n  return from(arr).pipe(\n      delayWhen(x=>timer(x))\n    );\n}\n\n```"}},"__N_SSG":true}