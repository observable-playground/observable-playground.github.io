{"pageProps":{"library":{"name":"RxJS","version":"6.6.3","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"sampleTime","title":"sampleTime","pageTitle":"sampleTime — RxJS operator example + marble diagram","desc":"sampleTime listens to the source stream and then produces the most recently emitted value within periodic time intervals:","docsUrl":"https://rxjs.dev/api/operators/sampleTime","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/sampleTime.md","content":"\n\n`sampleTime` listens to the source stream and then produces the most recently emitted value within periodic time intervals.  \n> Also try this [debounceTime vs throttleTime vs auditTime vs sampleTime](/rxjs/debounceTime-vs-throttleTime-vs-auditTime-vs-sampleTime/) head-to-head comparison\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { merge, timer, from } = require('rxjs');\nconst { map, zip, sampleTime, takeUntil } = require('rxjs/operators');\n\n// endless stream for coloring\nconst palette$ = from(palette);\n\n// generate a colorized marble stream\nconst source$ = merge(timer(0, 330), timer(50, 180)).pipe(\n    zip(palette$, Marble),\n    map(setCurrentTime),\n    takeUntil(timer(1000))\n  );\n\nsource$\n  .subscribe(rxObserver('source'));\n\nsource$.pipe(\n    sampleTime(100),\n    map(setCurrentTime)\n  )\n  .subscribe(rxObserver('sampleTime(100)'));\n\n\n// helpers\n// keeps colors, updated value to Date.now\nfunction setCurrentTime({ color }){\n  return Marble(Date.now(), color);\n}\n\n// creates a colored Marble\nfunction Marble(value, color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n\n```"}},"__N_SSG":true}