{"pageProps":{"library":{"name":"RxJS","version":"6.6.3","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"forEach","title":"forEach","pageTitle":"forEach — RxJS Observable method usage example + marble diagram","desc":"","docsUrl":"https://rxjs.dev/api/index/class/Observable#forEach","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/forEach.md","content":"\n\n`forEach` function let's us iterate over stream emissions. It takes a function to handle `next` stream events and returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) to handle `error` and `complete` events.\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { interval } = require('rxjs');\nconst { take } = require('rxjs/operators');\n\n\n// observer is needed to draw marble diagram\nconst observer = rxObserver();\n\ninterval(5).pipe(\n  take(10)\n)\n  // forEach returns a promise\n  .forEach(observer.next)\n  // it will resolve on Observable complete\n  //     and error   on Observable error\n  .then(observer.complete, observer.error);\n```\n\nHere's a more convenient usecase with [`async` / `await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) approach:\n\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { interval } = require('rxjs');\nconst { take } = require('rxjs/operators');\n\n\ndoAsyncWork();\n\n// define async function\nasync function doAsyncWork(){\n  // observer is needed to draw marble diagram\n  const observer = rxObserver();\n\n  // create observable and iterate over it\n  await interval(5).pipe(\n    take(10)\n  )\n    .forEach(observer.next);\n  \n  // indicate that it's completed\n  observer.complete();\n}\n```\n"}},"__N_SSG":true}