{"pageProps":{"library":{"name":"RxJS","version":"6.6.3","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"‚ö†Ô∏è Experimental","items":["js-pipeline"]}]},"example":{"name":"autorun","title":"rxjs-autorun","pageTitle":"rxjs-autorun ‚Äî automatically re-evaluate an expression whenever Observable in it emits","desc":"RxJS-Autorun playground. Automatically re-evaluate an expression whenever Observable in it emits","docsUrl":"","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/autorun.md","content":"\n\n## üìñ About\n\nAutomatically re-evaluate an expression whenever Observable in it emits\n\n**üîó Links:**    \nSee the homepage: [github.com/kosich/rxjs-autorun](https://github.com/kosich/rxjs-autorun)    \nRead an intro article: [\"RxJS Autorun Intro\"](https://dev.to/rxjs/rxjs-autorun-cop)    \n\n**üì¶ Install:**    \n<pre><code>\nnpm i rxjs-autorun\n</code></pre>\n\n## üõ∏ Examples\n\n### Simple mapping\n\n`computed` will run the `() => a + '!'` expression whenever `a` emits a distinctive value:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { computed, $ } = require('rxjs-autorun');\n\nconst a = timer(100); // 0 in 100ms\nconst c = computed(() => $(a) + '!Ô∏è');\n\na.subscribe(rxObserver('a'));\nc.subscribe(rxObserver('a + !'));\n```\n\n### Combine two streams\n\n`computed` will run the `() => a + b` expression whenever `a` or `b` emit a distinctive value:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer, of } = require('rxjs');\nconst { map } = require('rxjs/operators');\nconst { computed, $, _ } = require('rxjs-autorun');\n\n\nconst a = timer(0, 100); // 0, 1, 2, ‚Ä¶\nconst b = timer(0, 330).pipe(map(i => i % 2 ? 'üêá' : 'ü¶î' )); // ü¶î, üêá, ü¶î, ‚Ä¶\nconst c = computed(() => $(a) + $(b));\n\na.subscribe(rxObserver('a'));\nb.subscribe(rxObserver('b'));\nc.subscribe(rxObserver('a + b'));\n```\n\n### Combine `a` with latest `b`\n\n`computed` will run the `() => a + b` expression whenever `a` emits a distinctive value, with latest value from `b`:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer, of } = require('rxjs');\nconst { map } = require('rxjs/operators');\nconst { computed, $, _ } = require('rxjs-autorun');\n\n\nconst a = timer(0, 100); // 0, 1, 2, ‚Ä¶\nconst b = timer(0, 330).pipe(map(i => i % 2 ? 'üêá' : 'ü¶î' )); // ü¶î, üêá, ü¶î, ‚Ä¶\nconst c = computed(() => $(a) + _(b));\n\na.subscribe(rxObserver('a'));\nb.subscribe(rxObserver('b'));\nc.subscribe(rxObserver('a + latest b'));\n```\n\n---\n\n**üõ† Check out the docs for more: [github.com/kosich/rxjs-autorun](https://github.com/kosich/rxjs-autorun)**\n\n_This is one of my libs that I'd like to share with you_\n"}},"__N_SSG":true}