{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["forEach","tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout","pipe"]}]},"example":{"name":"timeout","title":"timeout","pageTitle":"timeout — RxJS operator example + marble diagram","desc":"timeout operator will ensure that time gap between emissions won't be longer than defined duration","docsUrl":"https://rxjs.dev/api/operators/timeout","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/timeout.md","content":"\n\nTimeout operator will ensure that time gap between emissions won't be longer than defined duration. If source doesn't emit longer then duration — `timeout` will raise an error on stream:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { from, timer } = require('rxjs');\nconst { delayWhen, timeout } = require('rxjs/operators');\n\n// create a source that will emit at 0, 10, 20 and 45ms\nconst source$ = from([ 0, 10, 20, 45 ])\n  .pipe(\n    delayWhen(x => timer(x))\n  );\n\n// set maximum gap using `timeout`\nconst result$ = source$.pipe(\n  timeout(20)\n);\n\n\nsource$.subscribe(rxObserver());\nresult$.subscribe(rxObserver());\n\n```\n"}},"__N_SSG":true}