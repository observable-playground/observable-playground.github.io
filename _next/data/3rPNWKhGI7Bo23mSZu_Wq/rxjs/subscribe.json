{"pageProps":{"library":{"name":"RxJS","version":"6.6.7","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","single","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","defaultIfEmpty","delay","delayWhen","dematerialize","repeat","timeout"]}]},"example":{"name":"subscribe","title":"subscribe","pageTitle":"subscribe â€” RxJS Observable method example + marble diagram","desc":"subscribe method indicates to inner emitter that the Observer is ready to receive emissions","docsUrl":"https://rxjs.dev/api/index/class/Observable#subscribe","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/subscribe.md","content":"\n\nCalling `subscribe` tells inner emitter function (producer) that the observer (consumer) is ready to receive emissions:\n\n_NOTE: take a look at [rxjs/constructor](/rxjs/constructor/) to better understand the producer-consumer connection_\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { interval } = require('rxjs');\n\n\n// source stream -- an interval\n// emitting at 50ms, 100ms, 150ms, 200ms, 250ms, etc\nconst source$ = interval(50);\n\n// observer to draw marbles on the diagram\nconst marbleObserver = rxObserver();\n\n// unsubscribe from source$ in 200ms\nconst subscription = source$\n  .subscribe(v => {\n    console.log(v);\n    marbleObserver.next(v); // draw a marble\n  });\n\n// unsubscribe from source$ in 220ms\nsetTimeout(() => {\n  subscription.unsubscribe();\n  marbleObserver.complete(); // complete diagram\n}, 220);\n```"}},"__N_SSG":true}