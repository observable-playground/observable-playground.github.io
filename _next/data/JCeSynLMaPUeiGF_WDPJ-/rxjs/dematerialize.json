{"pageProps":{"library":{"name":"RxJS","version":"6.6.0","description":"Reactive Extensions For JavaScript","groups":[{"name":"Observable","items":["pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","constructor"]},{"name":"Filtering","items":["filter","find","first","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]}]},"example":{"name":"dematerialize","title":"materialize - dematerialize","pageTitle":"materialize — RxJS-dematerialize operators usage example + marble diagram","desc":"See how to turn an error into an event that can be delayed","docsUrl":"https://rxjs.dev/api/operators/dematerialize","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/dematerialize.md","content":"\n\nTo manipulate error and completion events — we can turn them into ordinary value emissions, using `materialize`.  \nThen we’ll be able to apply any operator we want: `delay`, `map`, `filter`, etc.  \nAfter we're done, we can turn things back to normal using `dematerialize`:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer, throwError, Notification } = require('rxjs');\nconst { switchMap, materialize, dematerialize, delay, map } = require('rxjs/operators');\n\n\nconst source$ = timer(5).pipe(\n  switchMap(() => throwError('Err!'))\n);\n\nconst result$ = source$.pipe(\n  // turn all events on stream into Notifications\n  materialize(),\n  // delay error by 5ms\n  delay(5),\n  // turn error into a value\n  map(n => new Notification('N', n.error, undefined)),\n  // turn Notifications back to events on stream\n  dematerialize()\n);\n\nsource$.subscribe(rxObserver('source$'));\nresult$.subscribe(rxObserver('result$'));\n\n```\n"}},"__N_SSG":true}