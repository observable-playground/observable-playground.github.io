{"pageProps":{"library":{"name":"RxJS","version":"6.6.3","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"windowWhen","title":"windowWhen","pageTitle":"windowWhen — RxJS operator example","desc":"windowWhen will emit a new substream of values from the source stream, every time the stream returned by provided function emits:","docsUrl":"https://rxjs.dev/api/operators/throttleTime","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/windowWhen.md","content":"\n\nwindowWhen will emit a new substream of values from the source stream, every time the stream returned by provided function emits:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { take, windowWhen, mergeMap, count } = require('rxjs/operators');\n\ntimer(0, 4).pipe(\n    // take 10 values\n    take(10),\n  \n    // open a window every 10ms\n    windowWhen(() => timer(10)),\n  \n    // manage with the substream\n    // that emits events inside the window\n    mergeMap(substream =>\n      substream.pipe(count())\n    )\n  )\n  .subscribe(rxObserver());\n  ```"}},"__N_SSG":true}