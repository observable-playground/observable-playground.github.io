{"pageProps":{"library":{"name":"RxJS","version":"6.6.3","description":"Reactive Extensions For JavaScript","groups":[{"name":"My packages","items":["autorun","proxy","query"]},{"name":"Observable","items":["constructor","pipe","forEach","toPromise","subscribe"]},{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","range","iif","never","empty"]},{"name":"Filtering","items":["filter","find","first","take","takeUntil","takeWhile","auditTime","debounceTime","throttleTime","sampleTime","windowToggle"]},{"name":"Combination","items":["zip","forkJoin","race","combineLatest","withLatestFrom","startWith"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["map","pluck","buffer","mergeMap","switchMap","exhaustMap","concatMap","expand","toArray","windowWhen"]},{"name":"Multicasting","items":["share","shareReplay"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout"]},{"name":"⚠️ Experimental","items":["js-pipeline"]}]},"example":{"name":"pipe","title":"pipe","pageTitle":"pipe — RxJS Observable method and function usage example + marble diagram","desc":"Chain Rx operators or create new ones using pipe function and pipe factory","docsUrl":"https://rxjs.dev/api/index/class/Observable#pipe","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/files/pipe.md","content":"\n\n## method\n\n`pipe` function let's you chain RxJS operators:  \n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { filter, take } = require('rxjs/operators');\n\n\ntimer(0, 10)\n  .pipe(\n    filter(x => x % 2), // filter only even numbers\n    take(10)            // take 10 values and complete\n  )\n  .subscribe(rxObserver('Odd'));\n\n```\n\n_NOTE: pipe function returns a new Observable each time_\n\n## factory\n\nYou can also use [`pipe` factory](https://rxjs.dev/api/index/function/pipe) to create new operators:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer, pipe } = require('rxjs');\nconst { filter, take } = require('rxjs/operators');\n\n\ntimer(0, 10)\n  .pipe( // pipe operators\n    tenEvens()\n  )\n  .subscribe(rxObserver('Odd'));\n\n// create a new operator using pipe constructor\nfunction tenEvens(){\n  return pipe(\n    filter(x => x % 2), // filter only even numbers\n    take(10)            // take 10 values and complete\n  )\n} \n```"}},"__N_SSG":true}