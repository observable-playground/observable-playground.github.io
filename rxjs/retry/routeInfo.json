{"template":"../src/Example/Example.page.js","sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"retry","example":{"name":"retry","title":"retry","pageTitle":"RxJS retry operator example + marble diagram","desc":"","docsUrl":"https://rxjs.dev/api/operators/retry","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/retry.md","content":"\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { timer, from } = require('rxjs');\nconst { zip, map, retry } = require('rxjs/operators');\n\nconst error$ = timer(0, 5).pipe(\n    map(x=>{\n      if (x>2) { throw 'Bam!' }\n      return x;\n    }),\n    zip(from(palette), Marble) // colorize the stream\n  );\n\n// retry 2 times\nconst retry$ = error$.pipe(\n    retry(2)\n  );\n\n\nerror$.subscribe(rxObserver());\nretry$.subscribe(rxObserver());\n\n\n// helpers\n// creates a colored Marble\nfunction Marble(value,color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n```\n\nCheck out [\"Error handling in RxJS\"](https://medium.com/@kddsky/error-handling-in-rxjs-bac0f96a7def) article to get better understanding how not to fail with Observables."}},"path":"rxjs/retry"}
