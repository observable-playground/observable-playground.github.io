{"template":"__react_static_root__/src/Example/Example.page.js","sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"auditTime","example":{"name":"auditTime","title":"auditTime","pageTitle":"RxJS auditTime operator example","desc":"auditTime waits for the source stream to emit a value, waits for a given duration, and then emits the latest emitted value within that period. Then repeats this process:","docsUrl":"https://rxjs.dev/api/operators/auditTime","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/auditTime.md","content":"\n\nauditTime waits for the source stream to emit a value, waits for a given duration, and then emits the latest emitted value within that period. Then repeats this process.\n\nAlso, see this \"[debounceTime vs throttleTime vs auditTime vs sampleTime](/rxjs/debounceTime-vs-throttleTime-vs-auditTime-vs-sampleTime/)\" head-to-head comparison\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { merge, timer, from } = require('rxjs');\nconst { map, zip, auditTime, takeUntil } = require('rxjs/operators');\n\n// endless stream for coloring\nconst palette$ = from(palette);\n\n// generate a colorized marble stream\nconst source$ = merge(timer(0, 330), timer(50, 180)).pipe(\n    zip(palette$, Marble),\n    map(setCurrentTime),\n    takeUntil(timer(1000))\n  );\n\nsource$\n  .subscribe(rxObserver('source'));\n\nsource$.pipe(\n    auditTime(100),\n    map(setCurrentTime)\n  )\n  .subscribe(rxObserver('auditTime(100)'));\n\n\n// helpers\n// keeps colors, updated value to Date.now\nfunction setCurrentTime({ color }){\n  return Marble(Date.now(), color);\n}\n\n// creates a colored Marble\nfunction Marble(value, color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n```"}},"path":"rxjs/auditTime"}
