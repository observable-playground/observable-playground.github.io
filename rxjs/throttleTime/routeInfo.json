{"template":"__react_static_root__/src/Example/Example.page.js","sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"throttleTime","example":{"name":"throttleTime","title":"throttleTime","pageTitle":"RxJS throttleTime operator example","desc":"throttleTime will emit a value from the source stream and then ignore emissions for a given period of time:","docsUrl":"https://rxjs.dev/api/operators/throttleTime","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/throttleTime.md","content":"\n\nthrottleTime will emit a value from the source stream and then ignore emissions for a given period of time. throttleTime can be configured `{ leading: boolean, trailing: boolean }` to trigger emission of the first and/or last value in the period\n\nAlso, see this \"[debounceTime vs throttleTime vs auditTime vs sampleTime](/rxjs/debounceTime-vs-throttleTime-vs-auditTime-vs-sampleTime/)\" head-to-head comparison\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { merge, timer, from } = require('rxjs');\nconst { map, zip, throttleTime, takeUntil } = require('rxjs/operators');\n\n// stream for coloring\nconst palette$ = from(palette);\n\n// generate a colorized marble stream\nconst source$ = merge(timer(0, 330), timer(50, 180)).pipe(\n    zip(palette$, Marble),\n    map(setCurrentTime),\n    takeUntil(timer(1000))\n  );\n\nsource$\n  .subscribe(rxObserver('source'));\n\nsource$.pipe(\n    throttleTime(100, undefined, { leading: true }),\n    map(setCurrentTime)\n  )\n  .subscribe(rxObserver('throttleTime(100) -- leading'));\n\nsource$.pipe(\n    throttleTime(100, undefined, { trailing: true }),\n    map(setCurrentTime)\n  )\n  .subscribe(rxObserver('throttleTime(100) -- trailing'));\n\nsource$.pipe(\n    throttleTime(100, undefined, { leading: true, trailing: true }),\n    map(setCurrentTime)\n  )\n  .subscribe(rxObserver('throttleTime(100) -- both'));\n\n// helpers\n// keeps colors, updated value to Date.now\nfunction setCurrentTime({ color }){\n  return Marble(Date.now(), color);\n}\n\n// creates a colored Marble\nfunction Marble(value, color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n```"}},"path":"rxjs/throttleTime"}
