{"template":"../src/Example/Example.page.js","sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"mergeMap-vs-exhaustMap-vs-switchMap-vs-concatMap","example":{"name":"mergeMap-vs-exhaustMap-vs-switchMap-vs-concatMap","title":"mergeMap vs exhaustMap vs switchMap vs concatMap","pageTitle":"RxJS mergeMap vs exhaustMap vs switchMap vs concatMap comparison","desc":"See this head-to-head comparison of mergeMap (aka flatMap), exhaustMap, switchMap and concatMap with a marble diagram:","docs":"","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/mergeMap-vs-exhaustMap-vs-switchMap-vs-concatMap.md","content":"\n\nSource that emits at **5ms, 10ms, 20ms** will be `*Mapped` to a `timer(0, 3)`, limited to 3 emissions\n\n```js\nconst { rxObserver, palette } = require('api/v0.3');\nconst { from, timer, pipe } = require('rxjs');\nconst { zip, take, map, mergeMap, switchMap, concatMap, exhaustMap, tap, delayWhen } = require('rxjs/operators');\n\n\n// our source$ will emit values at 5ms, 10ms, 20ms\nconst source$ = fromDelayed([ 5, 10, 20 ]).pipe(\n    zip(from(palette), Marble) // colorize each item\n  );\n\n// target$ that we'll be mapping to\nconst target$ = timer(0, 3).pipe(take(3));\n\nconst mergeMap$ = source$.pipe(\n    mergeMap(x => target$.pipe(colorize(x.color))) // colorize as source$ value\n  );\n\nconst exhaustMap$ = source$.pipe(\n    exhaustMap(x => target$.pipe(colorize(x.color)))\n  );\n\nconst switchMap$ = source$.pipe(\n    switchMap(x => target$.pipe(colorize(x.color)))\n  );\n\nconst concatMap$ = source$.pipe(\n    concatMap(x => target$.pipe(colorize(x.color)))\n  );\n\n\n// visualization\nsource$.subscribe(rxObserver('[source$] A stream that emits at [5ms, 10ms, 20ms]'));\ntarget$\n  .pipe(colorize('#ff5073'))\n  .subscribe(rxObserver('[target$] will be mapped to a timer that emits at [N+0ms, N+3ms, N+6ms]'));\nmergeMap$.subscribe(rxObserver('mergeMap'));\nexhaustMap$.subscribe(rxObserver('exhaustMap'));\nswitchMap$.subscribe(rxObserver('switchMap'));\nconcatMap$.subscribe(rxObserver('concatMap'));\n\n\n// helpers\nfunction colorize(color) {\n  return pipe(\n    map(y => Marble(y, color))\n  );\n}\n\n// creates a colored Marble\nfunction Marble(value,color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n// like .from, but items are delayed by their value\nfunction fromDelayed (arr) {\n  return from(arr).pipe(\n      delayWhen(x=>timer(x))\n    );\n}\n\n```\n"}},"path":"rxjs/mergeMap-vs-exhaustMap-vs-switchMap-vs-concatMap"}
