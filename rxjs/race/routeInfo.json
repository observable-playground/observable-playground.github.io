{"template":"/home/travis/build/observable-playground/observable-playground/src/Example/Example.page.js","sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"race","example":{"name":"race","title":"race","pageTitle":"RxJS race function example + marble diagram","desc":"Once received a value, error or completion event from any given stream, race will reproduce all events from that stream","docsUrl":"https://rxjs.dev/api/index/function/race","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/race.md","content":"\n\nOnce received a value, error or completion event from any given stream, `race` will reproduce all events from that stream, while unsubscribing from other streams\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { timer, race } = require('rxjs');\nconst { mapTo, take } = require('rxjs/operators');\n\n\nconst a$ = timer(10).pipe(mapTo('a'));\nconst b$ = timer(5, 5).pipe(take(3));\n\nconst result$ = race([ a$, b$ ]);\n\na$.subscribe(rxObserver('a$'));\nb$.subscribe(rxObserver('b$'));\nresult$.subscribe(rxObserver('race(a$, b$)'));\n\n```\n"}},"path":"rxjs/race"}
