{"template":"/home/travis/build/observable-playground/observable-playground/src/Example/Example.page.js","sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"delayWhen","example":{"name":"delayWhen","title":"delayWhen","pageTitle":"RxJS delayWhen operator example + marble diagram","desc":"","docsUrl":"https://rxjs.dev/api/operators/delayWhen","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/delayWhen.md","content":"\n\nDelay value emission by a another stream. In this example we'll delay source stream emissions by their numeric values:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { from, timer } = require('rxjs');\nconst { delayWhen } = require('rxjs/operators');\n\nconst source$ =  from([ 0, 15, 20, 25, 5, 10 ]);\n\nconst delayed$ = source$.pipe(\n    delayWhen(x => timer(x))\n  );\n  \nsource$.subscribe(rxObserver('source$'));\ndelayed$.subscribe(rxObserver('delayed$'));\n\n```\n\nTo delay values emission by constant time â€” see [`delay` operator example](/rxjs/delay/)"}},"path":"rxjs/delayWhen"}
