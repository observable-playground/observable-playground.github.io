{"template":"../src/Library/rxjs/index.js","sharedHashesByProp":{},"data":{"handle":"rxjs","library":{"name":"RxJS","version":"6.4.0","description":"Reactive Extensions For JavaScript","examples":{"interval":"const { rxObserver } = require('api/v0.3');\nconst { interval } = require('rxjs');\nconst { take } = require('rxjs/operators');\n\ninterval(5).pipe(\n    take(10)\n  )\n  .subscribe(rxObserver());\n","timer":"const { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { take } = require('rxjs/operators');\n\n\n// Will emit once\ntimer(10)\n  .subscribe(rxObserver('timer(10)'));\n\n// Will start emiting after 10ms timeout\n// with 5ms interval\ntimer(10, 5).pipe(\n    take(4)\n  )\n  .subscribe(rxObserver('timer(10, 5)'));\n","from":"const { rxObserver } = require('api/v0.3');\nconst { from } = require('rxjs');\n\n// from Array\nfrom([ 5, 10, 20 ])\n  .subscribe(rxObserver('from([5, 10, 20])'));\n\n// from string\nfrom('Hello')\n  .subscribe(rxObserver(`from('Hello')`));\n\n// NOTE: also check the `fromPromise` example\n","fromPromise":"const { rxObserver } = require('api/v0.3');\nconst { from } = require('rxjs');\n\nconst promise = new Promise((resolve, reject)=>{\n  setTimeout(() => resolve('done'), 10);\n});\n\nfrom(promise)\n  .subscribe(rxObserver('from(promise)'));\n\n// NOTE: also check the `from` example\n","of":"const { rxObserver } = require('api/v0.3');\nconst { of } = require('rxjs');\n\nof(1)\n  .subscribe(rxObserver());\n","defer":{"name":"defer","title":"defer","description":"","files":["./examples/rxjs/creation/defer.md","./examples/rxjs/creation/defer.js"]},"iif":{"name":"iif","title":"iif","description":"","files":["./examples/rxjs/creation/iif.md","./examples/rxjs/creation/iif.js"]},"constructor":{"name":"constructor","title":"constructor","description":"","files":["./examples/rxjs/creation/constructor.js"]},"filter":"const { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { filter, take } = require('rxjs/operators');\n\n\nconst source$ = timer(0, 5).pipe(\n    take(4)\n  );\n\nconst result$ = source$.pipe(\n    filter(x => x % 2)\n  );\n\nsource$.subscribe(rxObserver());\nresult$.subscribe(rxObserver());\n","find":"const { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { find, take } = require('rxjs/operators');\n\n\nconst source$ = timer(0, 5).pipe(\n    take(4)\n  );\n\nconst result$ = source$.pipe(\n    find(x => x > 1)\n  );\n\nsource$.subscribe(rxObserver());\nresult$.subscribe(rxObserver());\n","buffer":"const { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { buffer, take } = require('rxjs/operators');\n\n\nconst source$ = timer(0, 3).pipe(\n    take(10)\n  );\n\nconst trigger$ = timer(0, 7).pipe(\n    take(5)\n  );\n\nconst buffered$ = source$.pipe(\n    buffer(trigger$)\n  );\n\nsource$.subscribe(rxObserver('source'));\ntrigger$.subscribe(rxObserver('trigger'));\nbuffered$.subscribe(rxObserver('buffered'));\n","mergeMap":{"name":"mergeMap","title":"mergeMap","description":"","files":["./examples/rxjs/transformation/mergeMap.js","./examples/rxjs/transformation/metaMapComparison.md"]},"switchMap":{"name":"switchMap","title":"switchMap","description":"","files":["./examples/rxjs/transformation/switchMap.js","./examples/rxjs/transformation/metaMapComparison.md"]},"exhaustMap":{"name":"exhaustMap","title":"exhaustMap","description":"","files":["./examples/rxjs/transformation/exhaustMap.js","./examples/rxjs/transformation/metaMapComparison.md"]},"concatMap":{"name":"concatMap","title":"concatMap","description":"","files":["./examples/rxjs/transformation/concatMap.js","./examples/rxjs/transformation/metaMapComparison.md"]},"windowToggle":"const { rxObserver } = require('api/v0.3');\nconst { timer, merge, Subject } = require('rxjs');\nconst { windowToggle, take, flatMap, mapTo } = require('rxjs/operators');\n\n\nconst source$ = timer(0, 10).pipe(take(10));\n\nconst windowOn$ = new Subject();\nconst windowOff$ = new Subject();\n\nconst result$ = source$.pipe(\n  // filter values between on-off pairs\n  windowToggle(\n    windowOn$,\n    ()=>windowOff$\n  ),\n\n  // flattern window values\n  flatMap(v=>v)\n);\n\n// trigger ONs and OFFs\nwindowOn(15);\nwindowOff(35);\n\nwindowOn(75);\nwindowOff(85);\n\n\n// subscriptions\nsource$.subscribe(rxObserver('source'));\nresult$.subscribe(rxObserver('result'));\nmerge(\n    windowOn$.pipe(mapTo('on')),\n    windowOff$.pipe(mapTo('off'))\n  )\n  .subscribe(rxObserver('switch'));\n\n\n// helpers\nfunction windowOn(delay){\n  return setTimeout(()=>{\n    windowOn$.next(void 0);\n  }, delay);\n}\n\nfunction windowOff(delay){\n  return setTimeout(()=>{\n    windowOff$.next(void 0);\n  }, delay);\n}\n","expand":"const { rxObserver } = require('api/v0.3');\nconst { of, timer, EMPTY } = require('rxjs');\nconst { expand, mapTo } = require('rxjs/operators');\n\nof(1).pipe(\n    expand(value =>\n      value < 5\n      ? timer(5).pipe(mapTo(++value))\n      : EMPTY\n    )\n  )\n  .subscribe(rxObserver());\n","toArray":"const { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { take, toArray } = require('rxjs/operators');\n\n\n// create a timer with 3 events\nconst source$ = timer(0, 5).pipe(\n    take(3)\n  );\n\n// collapse all events into one array\nconst result$ = source$.pipe(\n    toArray()\n  );\n\nsource$.subscribe(rxObserver('timer(0, 10).take(4)'));\nresult$.subscribe(rxObserver('.toArray()'));\n","throwError":{"name":"throwError","title":"throwError","description":"","files":["./examples/rxjs/error-handling/throwError.js","./examples/rxjs/error-handling/afterword.md"]},"catch":{"name":"catch","title":"catch","description":"","files":["./examples/rxjs/error-handling/catch.js","./examples/rxjs/error-handling/afterword.md"]},"retry":{"name":"retry","title":"retry","description":"","files":["./examples/rxjs/error-handling/retry.js","./examples/rxjs/error-handling/afterword.md"]},"retryWhen":{"name":"retryWhen","title":"retryWhen","description":"","files":["./examples/rxjs/error-handling/retryWhen.js","./examples/rxjs/error-handling/afterword.md"]},"onErrorResumeNext":{"name":"onErrorResumeNext","title":"onErrorResumeNext","description":"","files":["./examples/rxjs/error-handling/onErrorResumeNext.js","./examples/rxjs/error-handling/afterword.md"]},"share":{"name":"share","title":"share","description":"","files":["./examples/rxjs/multicasting/share.js"]},"zip":{"name":"zip","title":"zip","description":"","files":["./examples/rxjs/combination/zip.md","./examples/rxjs/combination/zip.js"]},"forkJoin":"const { rxObserver } = require('api/v0.3');\nconst { timer, forkJoin } = require('rxjs');\nconst { mapTo, take } = require('rxjs/operators');\n\n\nconst a$ = timer(10).pipe(mapTo('a'));\nconst b$ = timer(0, 10).pipe(take(3));\n\nconst result$ = forkJoin(a$, b$);\n\na$.subscribe(rxObserver('a$'));\nb$.subscribe(rxObserver('b$'));\nresult$.subscribe(rxObserver('forkJoin(a$, b$)'));","combineLatest":"const { rxObserver } = require('api/v0.3');\nconst { timer, combineLatest } = require('rxjs');\nconst { take } = require('rxjs/operators');\n\n\nconst a$ = timer(0, 10).pipe(\n    take(5)\n  );\n\nconst b$ = timer(0, 4).pipe(\n    take(7)\n  );\n\nconst result$ = combineLatest(a$, b$);\n\na$.subscribe(rxObserver('a$'));\nb$.subscribe(rxObserver('b$'));\nresult$.subscribe(rxObserver('combineLatest(a$, b$)'));\n","tap":"const { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { tap, take } = require('rxjs/operators');\n\ntimer(0, 5)\n  .pipe(\n    take(10),\n    tap(v => console.log('tap', v))\n  )\n  .subscribe(rxObserver('tap()'));\n\n\n// Compat version with .do\nconst { Observable } = require('rxjs/Rx');\nObservable\n  .timer(0, 5)\n  .take(10)\n  .do(v => console.log('do', v))\n  .subscribe(rxObserver('.do()'));\n","finalize":"const { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { finalize } = require('rxjs/operators');\n\ntimer(5)\n  .pipe(\n    finalize(()=>\n      console.log(`Finished @ ${ Date.now() }ms`)\n    )\n  )\n  .subscribe(rxObserver());\n","timeInterval":"\nconst { rxObserver } = require('api/v0.3');\nconst { interval, merge } = require('rxjs');\nconst { timeInterval, take, map } = require('rxjs/operators');\n\n// Indicates time passed since previous value\n\nmerge(\n  interval(5),\n  interval(7)\n)\n  .pipe(\n    take(10),\n    timeInterval(),\n    map(({ interval }) => `+${interval}`)\n  )\n  .subscribe(rxObserver(''));\n","delay":"const { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { delay, take } = require('rxjs/operators');\n\n// basic timer\nconst timer$ = timer(0, 10)\n  .pipe(\n    take(5)\n  );\n\n// same timer, values delayed by 15ms\nconst delayed$ = timer$.pipe(\n    delay(15)\n  );\n\ntimer$.subscribe(rxObserver('Basic timer'));\ndelayed$.subscribe(rxObserver('Delayed by 15ms'));\n","delayWhen":"const { rxObserver } = require('api/v0.3');\nconst { from, timer } = require('rxjs');\nconst { delayWhen } = require('rxjs/operators');\n\nfrom([ 0, 15, 20, 25, 5, 10 ])\n  .pipe(\n    delayWhen(x => timer(x))\n  )\n  .subscribe(rxObserver());\n","dematerialize":"const { rxObserver } = require('api/v0.3');\nconst { timer, throwError, Notification } = require('rxjs');\nconst { switchMap, materialize, dematerialize, delay, map } = require('rxjs/operators');\n\n\nconst source$ = timer(5).pipe(\n  switchMap(() => throwError('Err!'))\n);\n\nconst result$ = source$.pipe(\n  // turn all events on stream into Notifications\n  materialize(),\n  // delay error by 5ms\n  delay(5),\n  // turn error into a value\n  map(n => new Notification('N', n.error, undefined)),\n  // turn Notifications back to events on stream\n  dematerialize()\n);\n\nsource$.subscribe(rxObserver('source$'));\nresult$.subscribe(rxObserver('result$'));\n","repeat":"\nconst { rxObserver } = require('api/v0.3');\nconst { timer, iif, of } = require('rxjs');\nconst { repeat, delay } = require('rxjs/operators');\n\n// repeat:\n// resubscribe when source stream completes\n\n// basic example\ntimer(5)\n  .pipe(\n    repeat(5)\n  )\n  .subscribe(rxObserver());\n\n// when source stream completes -- repeat\n// subscribes again and gets a new stream\niif(\n  () => Date.now() < 10\n  , of('0..10')\n  , of('10+')\n)\n  .pipe(\n    delay(5),\n    repeat(5)\n  )\n  .subscribe(rxObserver());\n","timeout":"const { rxObserver } = require('api/v0.3');\nconst { from, timer } = require('rxjs');\nconst { delayWhen, timeout } = require('rxjs/operators');\n\nconst source$ = from([ 0, 10, 20, 45 ])\n  .pipe(\n    delayWhen(x => timer(x))\n  );\n\nconst result$ = source$.pipe(\n  timeout(20)\n);\n\nsource$.subscribe(rxObserver());\nresult$.subscribe(rxObserver());\n","pipe":"const { rxObserver } = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { filter,take } = require('rxjs/operators');\n\n\ntimer(0, 10)\n  .pipe(\n    take(10),\n    filter(x => x % 2)\n  )\n  .subscribe(rxObserver('Odd'));\n"},"groups":[{"name":"Creation","items":["of","from","fromPromise","interval","timer","defer","iif","constructor"]},{"name":"Combination","items":["zip","forkJoin","combineLatest"]},{"name":"Error handling","items":["throwError","catch","retry","retryWhen","onErrorResumeNext"]},{"name":"Transformation","items":["filter","find","buffer","mergeMap","switchMap","exhaustMap","concatMap","windowToggle","expand","toArray"]},{"name":"Multicasting","items":["share"]},{"name":"Utility","items":["tap","finalize","timeInterval","delay","delayWhen","dematerialize","repeat","timeout","pipe"]}]}},"path":"rxjs"}
