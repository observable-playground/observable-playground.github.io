{"template":"../src/Example/Example.page.js","sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"retryWhen","example":{"name":"retryWhen","title":"retryWhen","pageTitle":"RxJS retryWhen operator example with a marble diagram","desc":"","docsUrl":"https://rxjs.dev/api/operators/retryWhen","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/retryWhen.md","content":"\n\n```js\nconst {rxObserver} = require('api/v0.3');\nconst { timer } = require('rxjs');\nconst { map, tap, retryWhen, delayWhen } = require('rxjs/operators');\n\nconst source$ =\n  timer(0, 100).pipe(\n    map(val => {\n      if (val == 1) {\n        throw 'Err';\n      }\n      return val;\n    })\n  );\n\nconst result$ = source$.pipe(\n    retryWhen(errors =>\n      // here Errors are just events\n      errors.pipe(\n        // show error messages thread\n        tap(rxObserver('Error messages')),\n        // will restart with increasing delay\n        delayWhen((_, index) => timer(index * 50))\n      )\n    )\n);\n\nsource$.subscribe(rxObserver('source$'));\nresult$.subscribe(rxObserver('result$'));\n\n// a modification of\n// https://www.learnrxjs.io/operators/error_handling/retrywhen.html\n\n```\n\nCheck out [\"Error handling in RxJS\"](https://medium.com/@kddsky/error-handling-in-rxjs-bac0f96a7def) article to get better understanding how not to fail with Observables."}},"path":"rxjs/retryWhen"}
