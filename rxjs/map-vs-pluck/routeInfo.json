{"template":"/home/travis/build/observable-playground/observable-playground/src/Example/Example.page.js","sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"map-vs-pluck","example":{"name":"map-vs-pluck","title":"map vs pluck","pageTitle":"RxJS map vs pluck operators comparison + marble diagram","desc":"Compare map operator to pluck in this interactive playground:","docsUrl":"","editUrl":"https://github.com/observable-playground/observable-playground/tree/master/src/examples/rxjs/map-vs-pluck.md","content":"\n\n[map](/rxjs/map/) operator can be easily substituted with a simple [pluck](/rxjs/pluck/), if all we need is to read a property of the value:\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { of } = require('rxjs');\nconst { pluck, map } = require('rxjs/operators');\n\nconst source$ = of(\n  { a: 1 },\n  { a: 2 },\n  { },\n  { a: 3 }\n);\n\nsource$\n  .pipe(\n    map(x => x.a)\n  )\n  .subscribe(rxObserver('map(x => x.a)'));\n\nsource$\n  .pipe(\n    pluck('a')\n  )\n  .subscribe(rxObserver(`pluck('a')`));\n\n```\n\n\nEven better when we have nested properties!\n\n```js\nconst { rxObserver } = require('api/v0.3');\nconst { of } = require('rxjs');\nconst { pluck, map } = require('rxjs/operators');\n\nconst source$ = of(\n  { a: { b: 1 } },\n  { a: { b: 2 } },\n  { },\n  { a: { b: 3 } },\n);\n\nsource$\n  .pipe(\n    map(x => x.a && x.a.b)\n  )\n  .subscribe(rxObserver('map(x => x.a && x.a.b)'));\n\nsource$\n  .pipe(\n    pluck('a', 'b')\n  )\n  .subscribe(rxObserver(`pluck('a', 'b')`));\n\n```\n\n\n\n\nRead more about pluck vs map comparison in this article:\n\n[\"RxJs|Pluck: A pound of pluck is worth a ton of map !\"](https://medium.com/@chebbi.lamis/rxjs-pluck-a-pound-of-pluck-is-worth-a-ton-of-map-f7cc600db371) by [chebbi lamis](https://medium.com/@chebbi.lamis)"}},"path":"rxjs/map-vs-pluck"}
