{"templateIndex":4,"sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"switchMap","exampleCode":"const { rxObserver } = require('api/v0.3');\nconst { palette } = require('rp-api/colors');\nconst { Observable } = require('rxjs/Rx');\n\n// helpers {{{\n// stream for coloring\nconst palette$ = Observable.from(palette);\n// fn to define color for item\nconst Mark = (value,color)=>({valueOf(){ return value; },color});\n// like .from, but items are delayed by their value\nconst fromDelayed = arr =>\n  Observable\n    .from(arr)\n    .delayWhen(x=>Observable.timer(x));\n// }}}\n\nconst source$ = fromDelayed([ 5, 10, 20 ])\n  // get color for each item\n  .zip(palette$, Mark);\n\nconst switch$ = source$\n  .switchMap(x=> Observable\n    .timer(0, 3)\n    .take(5)\n    // inherit color from the source$ stream\n    .map(y=>Mark(y, x.color)));\n\n\nsource$.subscribe(rxObserver());\nswitch$.subscribe(rxObserver());\n"},"path":"rxjs/switchMap"}
