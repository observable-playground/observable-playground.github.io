{"template":"../src/Example/Example.page.js","sharedHashesByProp":{},"data":{"libraryName":"RxJS","exampleName":"switchMap","example":{"name":"switchMap","title":"switchMap","files":[{"name":"./examples/rxjs/transformation/switchMap.js","ext":".js","content":"const { rxObserver, palette } = require('api/v0.3');\nconst { from, timer, pipe } = require('rxjs');\nconst { zip, take, map, switchMap, delayWhen } = require('rxjs/operators');\n\n\n// our source$ will emit values at 5ms, 10ms, 20ms\nconst source$ = fromDelayed([ 5, 10, 20 ]).pipe(\n    zip(from(palette), Marble) // colorize each item\n  );\n\nconst switchMap$ = source$.pipe(\n    switchMap(x => timer(0, 3).pipe(\n        take(3),\n        colorize(x.color))  // colorize as source$ value\n      )\n  );\n\n// visualization\nsource$.subscribe(rxObserver('source$'));\nswitchMap$.subscribe(rxObserver('switchMap( timer(0, 3).take(3) )'));\n\n\n// helpers\nfunction colorize(color) {\n  return pipe(\n    map(y => Marble(y, color))\n  );\n}\n\n// creates a colored Marble\nfunction Marble(value,color) {\n  return {\n    valueOf: ()=>value\n    , color\n  };\n}\n\n// like .from, but items are delayed by their value\nfunction fromDelayed (arr) {\n  return from(arr).pipe(\n      delayWhen(x=>timer(x))\n    );\n}\n"},{"name":"./examples/rxjs/transformation/metaMapComparison.md","ext":".md","content":"Check out this [mergeMap vs exhaustMap vs switchMap vs concatMap](/gist/ba116f84fe9f1493b989902c0927bb35) head-to-head comparison.\n"}]}},"path":"rxjs/switchMap"}
